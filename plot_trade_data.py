"""
Plot trade data from benchmark algorithms.

This script creates visualizations from the CSV files generated by generate_trade_data.py.
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import os
import numpy as np
from datetime import datetime, timedelta
import seaborn as sns

def plot_cumulative_revenue(combined_df=None, output_dir="trade_data"):
    """Plot cumulative revenue over time for both algorithms."""
    if combined_df is None:
        # Load data if not provided
        combined_csv = os.path.join(output_dir, "combined_trades.csv")
        if not os.path.exists(combined_csv):
            print(f"Error: {combined_csv} not found. Run generate_trade_data.py first.")
            return
        combined_df = pd.read_csv(combined_csv)
        # Convert datetime strings to datetime objects with proper timezone handling
        combined_df['datetime'] = pd.to_datetime(combined_df['datetime'], utc=True)
    
    plt.figure(figsize=(12, 6))
    
    # Plot each algorithm separately
    for algo in combined_df['algorithm'].unique():
        algo_data = combined_df[combined_df['algorithm'] == algo]
        plt.plot(algo_data['datetime'], algo_data['cumulative_revenue'], 
                 label=algo, linewidth=2, marker='o', markersize=3)
    
    plt.title('Cumulative Revenue Over Time', fontsize=16)
    plt.xlabel('Date', fontsize=14)
    plt.ylabel('Cumulative Revenue ($M)', fontsize=14)
    plt.grid(True, alpha=0.3)
    plt.legend(fontsize=12)
    
    # Format x-axis to show months
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
    plt.gca().xaxis.set_major_locator(mdates.MonthLocator())
    
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, 'cumulative_revenue.png'), dpi=300)
    print(f"Saved cumulative revenue plot to {output_dir}/cumulative_revenue.png")
    plt.close()

def plot_daily_revenue(output_dir="trade_data"):
    """Plot daily revenue for both algorithms."""
    # Load daily revenue data
    naive_daily_csv = os.path.join(output_dir, "naive_daily_revenue.csv")
    dijkstra_daily_csv = os.path.join(output_dir, "dijkstra_daily_revenue.csv")
    
    if not os.path.exists(naive_daily_csv) or not os.path.exists(dijkstra_daily_csv):
        print(f"Error: Daily revenue CSV files not found. Run generate_trade_data.py first.")
        return
    
    naive_daily = pd.read_csv(naive_daily_csv)
    dijkstra_daily = pd.read_csv(dijkstra_daily_csv)
    
    # Convert date strings to datetime
    naive_daily['date'] = pd.to_datetime(naive_daily['date'])
    dijkstra_daily['date'] = pd.to_datetime(dijkstra_daily['date'])
    
    # Plot daily revenue
    plt.figure(figsize=(12, 6))
    
    plt.plot(naive_daily['date'], naive_daily['daily_revenue'], 
             label='Naive Benchmark', linewidth=1.5, alpha=0.7)
    plt.plot(dijkstra_daily['date'], dijkstra_daily['daily_revenue'], 
             label='Dijkstra', linewidth=1.5, alpha=0.7)
    
    # Add 7-day moving average
    naive_ma = naive_daily['daily_revenue'].rolling(window=7).mean()
    dijkstra_ma = dijkstra_daily['daily_revenue'].rolling(window=7).mean()
    
    plt.plot(naive_daily['date'], naive_ma, 
             label='Naive 7-day MA', linewidth=2.5)
    plt.plot(dijkstra_daily['date'], dijkstra_ma, 
             label='Dijkstra 7-day MA', linewidth=2.5)
    
    plt.title('Daily Revenue by Algorithm', fontsize=16)
    plt.xlabel('Date', fontsize=14)
    plt.ylabel('Daily Revenue ($)', fontsize=14)
    plt.grid(True, alpha=0.3)
    plt.legend(fontsize=12)
    
    # Format x-axis to show months
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
    plt.gca().xaxis.set_major_locator(mdates.MonthLocator())
    
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, 'daily_revenue.png'), dpi=300)
    print(f"Saved daily revenue plot to {output_dir}/daily_revenue.png")
    plt.close()

def plot_monthly_revenue(output_dir="trade_data"):
    """Plot monthly revenue for both algorithms."""
    # Load daily revenue data
    combined_daily_csv = os.path.join(output_dir, "combined_daily_revenue.csv")
    
    if not os.path.exists(combined_daily_csv):
        print(f"Error: {combined_daily_csv} not found. Run generate_trade_data.py first.")
        return
    
    combined_daily = pd.read_csv(combined_daily_csv)
    combined_daily['date'] = pd.to_datetime(combined_daily['date'])
    
    # Add month column
    combined_daily['month'] = combined_daily['date'].dt.to_period('M')
    
    # Group by algorithm and month
    monthly = combined_daily.groupby(['algorithm', 'month'])['daily_revenue'].sum().reset_index()
    monthly['month_str'] = monthly['month'].dt.strftime('%b %Y')
    
    # Pivot for plotting
    pivot_df = monthly.pivot(index='month_str', columns='algorithm', values='daily_revenue')
    
    # Sort by month chronologically
    month_order = sorted(monthly['month'].unique())
    month_str_order = [m.strftime('%b %Y') for m in month_order]
    pivot_df = pivot_df.reindex(month_str_order)
    
    # Plot
    plt.figure(figsize=(14, 7))
    pivot_df.plot(kind='bar', width=0.8, figsize=(14, 7))
    
    plt.title('Monthly Revenue by Algorithm', fontsize=16)
    plt.xlabel('Month', fontsize=14)
    plt.ylabel('Monthly Revenue ($)', fontsize=14)
    plt.grid(True, axis='y', alpha=0.3)
    plt.legend(fontsize=12)
    
    # Rotate x-axis labels
    plt.xticks(rotation=45, ha='right')
    
    # Add value labels on top of bars
    for i, algorithm in enumerate(pivot_df.columns):
        for j, value in enumerate(pivot_df[algorithm]):
            if not np.isnan(value):
                plt.text(j + (i - 0.5 + len(pivot_df.columns)/2) * 0.8/len(pivot_df.columns), 
                         value + (500 if value > 0 else -1500), 
                         f'${value:,.0f}', 
                         ha='center', va='bottom' if value > 0 else 'top',
                         fontsize=9, rotation=0)
    
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, 'monthly_revenue.png'), dpi=300)
    print(f"Saved monthly revenue plot to {output_dir}/monthly_revenue.png")
    plt.close()

def plot_trade_distribution(combined_df=None, output_dir="trade_data"):
    """Plot trade distribution by hour of day and month."""
    if combined_df is None:
        # Load data if not provided
        combined_csv = os.path.join(output_dir, "combined_trades.csv")
        if not os.path.exists(combined_csv):
            print(f"Error: {combined_csv} not found. Run generate_trade_data.py first.")
            return
        combined_df = pd.read_csv(combined_csv)
        # Convert datetime strings to datetime objects with proper timezone handling
        combined_df['datetime'] = pd.to_datetime(combined_df['datetime'], utc=True)
    
    # Add hour and month columns - convert to Pacific time first for proper hour analysis
    pacific_df = combined_df.copy()
    pacific_df['datetime_pacific'] = pacific_df['datetime'].dt.tz_convert('US/Pacific')
    pacific_df['hour'] = pacific_df['datetime_pacific'].dt.hour
    pacific_df['month'] = pacific_df['datetime_pacific'].dt.month
    pacific_df['month_name'] = pacific_df['datetime_pacific'].dt.strftime('%b')
    
    # Create separate dataframes for charge and discharge
    charge_df = pacific_df[pacific_df['trade_type'] == 'charge']
    discharge_df = pacific_df[pacific_df['trade_type'] == 'discharge']
    
    # Plot trade distribution by hour of day
    plt.figure(figsize=(14, 10))
    
    plt.subplot(2, 1, 1)
    for algo in charge_df['algorithm'].unique():
        algo_data = charge_df[charge_df['algorithm'] == algo]
        hour_counts = algo_data.groupby('hour').size()
        plt.bar(hour_counts.index + (0.2 if algo == 'Dijkstra' else -0.2), 
                hour_counts.values, width=0.4, alpha=0.7,
                label=f'{algo} Charging')
    
    plt.title('Charging Trades by Hour of Day', fontsize=16)
    plt.xlabel('Hour of Day', fontsize=14)
    plt.ylabel('Number of Trades', fontsize=14)
    plt.grid(True, axis='y', alpha=0.3)
    plt.legend(fontsize=12)
    plt.xticks(range(0, 24))
    
    plt.subplot(2, 1, 2)
    for algo in discharge_df['algorithm'].unique():
        algo_data = discharge_df[discharge_df['algorithm'] == algo]
        hour_counts = algo_data.groupby('hour').size()
        plt.bar(hour_counts.index + (0.2 if algo == 'Dijkstra' else -0.2), 
                hour_counts.values, width=0.4, alpha=0.7,
                label=f'{algo} Discharging')
    
    plt.title('Discharging Trades by Hour of Day', fontsize=16)
    plt.xlabel('Hour of Day', fontsize=14)
    plt.ylabel('Number of Trades', fontsize=14)
    plt.grid(True, axis='y', alpha=0.3)
    plt.legend(fontsize=12)
    plt.xticks(range(0, 24))
    
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, 'trade_distribution_by_hour.png'), dpi=300)
    print(f"Saved trade distribution by hour plot to {output_dir}/trade_distribution_by_hour.png")
    plt.close()
    
    # Plot trade distribution by month
    plt.figure(figsize=(14, 10))
    
    month_order = range(1, 13)
    month_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    
    plt.subplot(2, 1, 1)
    for i, algo in enumerate(charge_df['algorithm'].unique()):
        algo_data = charge_df[charge_df['algorithm'] == algo]
        month_counts = algo_data.groupby('month').size().reindex(month_order, fill_value=0)
        x_positions = [x + (0.2 if i == 1 else -0.2) for x in range(len(month_counts))]
        plt.bar(x_positions, 
                month_counts.values, width=0.4, alpha=0.7,
                label=f'{algo} Charging')
    
    plt.title('Charging Trades by Month', fontsize=16)
    plt.xlabel('Month', fontsize=14)
    plt.ylabel('Number of Trades', fontsize=14)
    plt.grid(True, axis='y', alpha=0.3)
    plt.legend(fontsize=12)
    plt.xticks(range(len(month_names)), month_names)
    
    plt.subplot(2, 1, 2)
    for i, algo in enumerate(discharge_df['algorithm'].unique()):
        algo_data = discharge_df[discharge_df['algorithm'] == algo]
        month_counts = algo_data.groupby('month').size().reindex(month_order, fill_value=0)
        x_positions = [x + (0.2 if i == 1 else -0.2) for x in range(len(month_counts))]
        plt.bar(x_positions, 
                month_counts.values, width=0.4, alpha=0.7,
                label=f'{algo} Discharging')
    
    plt.title('Discharging Trades by Month', fontsize=16)
    plt.xlabel('Month', fontsize=14)
    plt.ylabel('Number of Trades', fontsize=14)
    plt.grid(True, axis='y', alpha=0.3)
    plt.legend(fontsize=12)
    plt.xticks(range(len(month_names)), month_names)
    
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, 'trade_distribution_by_month.png'), dpi=300)
    print(f"Saved trade distribution by month plot to {output_dir}/trade_distribution_by_month.png")
    plt.close()

def main():
    output_dir = "trade_data"
    
    # Check if output directory exists
    if not os.path.exists(output_dir):
        print(f"Creating output directory: {output_dir}")
        os.makedirs(output_dir, exist_ok=True)
    
    # Check if combined trades CSV exists
    combined_csv = os.path.join(output_dir, "combined_trades.csv")
    if not os.path.exists(combined_csv):
        print(f"Error: {combined_csv} not found. Run generate_trade_data.py first.")
        return
    
    # Load combined data
    print("Loading trade data...")
    combined_df = pd.read_csv(combined_csv)
    # Convert datetime strings to datetime objects with proper timezone handling
    combined_df['datetime'] = pd.to_datetime(combined_df['datetime'], utc=True)
    
    # Generate all plots
    print("Generating plots...")
    plot_cumulative_revenue(combined_df, output_dir)
    plot_daily_revenue(output_dir)
    plot_monthly_revenue(output_dir)
    plot_trade_distribution(combined_df, output_dir)
    
    print("All plots generated successfully!")

if __name__ == "__main__":
    main()
